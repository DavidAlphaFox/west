[
 %% Riak Core config
 {riak_core, [
              %% Default location of ringstate
              {ring_state_dir, "{{ring_state_dir}}"},

              %% http is a list of IP addresses and TCP ports that the Riak
              %% HTTP interface will bind.
              {http, [ { "{{web_ip}}", {{web_port}} } ] },

              %% riak_handoff_port is the TCP port that Riak uses for
              %% intra-cluster data handoff.
              {handoff_port, {{handoff_port}} }
             ]
 },

 %% SASL config
 {sasl, [
         {sasl_error_logger, {file, "log/sasl-error.log"}},
         {errlog_type, error},
         {error_logger_mf_dir, "log/sasl"},      % Log directory
         {error_logger_mf_maxbytes, 10485760},   % 10 MB max file size
         {error_logger_mf_maxfiles, 5}           % 5 files max
        ]
 },

 %% YAWS config
 {yaws, [
         {docroot, "{{yaws_docroot}}" },
         {gconf, [{id, "embedded"},
                  {ebin_dir, ["{{yaws_ebin_dir}}"]},
                  {runmod, "yapp"}]},
         {sconf, [{servername, "{{yaws_servername}}" },
                  {listen, {{yaws_ip}} },
                  {port, {{yaws_port}} },
                  {docroot, "{{yaws_docroot}}" },
                  {appmods, [{"west", west_ws_endpoint}]},
                  {opaque, [{yapp_server_id, "yapp_west"},
                  {bootstrap_yapps, "west"}]}]}
        ]
 },

 %% WEST
 {west, [
         %% WEST distribution model.
         %% west_dist: Riak Core + Gproc local
         %% gproc_dist: Gproc distributed (gen_leader)
         {dist, {{dist}} },

         %% dist_props opts.
         %% dist_props_opts_n = replicas
         %% dist_props_opts_q = quorum
         {dist_props, [{opts, [{n, {{dist_props_opts_n}} }, {q, {{dist_props_opts_q}} }]}]},

         %% HTTP WebSocket Handshake Callback Spec
         %%
         %% http_ws_handshake_callback = {Module :: atom(), Function :: atom()}
         %%
         %% This callback is invoked when WS protocol handshake is initialized
         %% and the parameter 'Arg' of YAWS is passed to the callback. The
         %% callback is invoked in this way:
         %%
         %% apply(Module, Function, [Arg]) -> Response.
         %%
         %% Where:
         %%    Module = atom() - Module name
         %%    Function = atom() - Function name
         %%    Arg = YAWS arg - This is provided by WEST
         %%    Response = ok | {ResponseCode, ReasonPhrase} | any()
         %%    ResponseCode = integer()
         %%    ReasonPhrase = string()
         %%
         %% If the applied function returns 'ok' then the upgrade fromm HTTP
         %% to WebSocket continues, other cases upgrade is refused.
         {http_ws_handshake_callback, {{http_ws_handshake_callback}} }
        ]
 }
].

